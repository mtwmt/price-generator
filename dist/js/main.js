"use strict";

(function () {
  var $modal = document.querySelector('#modal');
  var $preview = document.querySelector('#preview');
  var $form = document.querySelector('form#form');
  var $inputs = document.querySelectorAll('input, textarea, select'); // common fn

  var _common = common(),
      setAmount = _common.setAmount,
      setTotal = _common.setTotal; // validate


  var _verify = verify(),
      constraints = _verify.constraints,
      setItemFormValidate = _verify.setItemFormValidate,
      showErrorsForInput = _verify.showErrorsForInput,
      handleFormSubmit = _verify.handleFormSubmit; // modal view


  var _modalView = modalView(),
      createModal = _modalView.createModal;

  var delItem = function delItem(row) {
    row.querySelector('.delItem').addEventListener('click', function (e) {
      e.preventDefault();

      if (document.querySelectorAll('[data-item]').length > 1) {
        this.parentElement.parentElement.remove();
        setTotal();
      }

      setItemFormValidate();
    });
  };

  var updateItemRow = function updateItemRow(row) {
    row.querySelectorAll('input').forEach(function (e, i) {
      e.addEventListener('change', function (ev) {
        setAmount(row);
        setTotal();
        var errors = validate($form, constraints) || {};
        showErrorsForInput(e, errors[e.name]);
      });
    });
    delItem(row);
  };
  /**
   * formData
   * @returns 表單資料
   */


  var formData = function formData() {
    var _$form$querySelector;

    var logoFile = (_$form$querySelector = $form.querySelector('[name=logo]')) === null || _$form$querySelector === void 0 ? void 0 : _$form$querySelector.files[0];
    var getLogo = !!logoFile ? URL.createObjectURL(logoFile) : null;
    var data = {
      logo: getLogo,
      company: $form.querySelector('[name=company]').value,
      taxID: $form.querySelector('[name=taxID]').value,
      name: $form.querySelector('[name=name]').value,
      phone: $form.querySelector('[name=phone]').value,
      email: $form.querySelector('[name=email]').value,
      startDate: $form.querySelector('[name=startDate]').value,
      endDate: $form.querySelector('[name=endDate]').value,
      desc: $form.querySelector('[name=desc]').value,
      total: $form.querySelector('#total-price').textContent,
      items: []
    };
    $form.querySelectorAll('[data-item]').forEach(function (e, index) {
      data.items.push({
        category: e.querySelector("[name*=category").value,
        item: e.querySelector("[name*=item").value,
        price: e.querySelector("[name*=price").value,
        count: e.querySelector("[name*=count").value,
        unit: e.querySelector("[name*=unit").value,
        amount: e.querySelector("[name*=amount]").value
      });
    });
    return data;
  };

  var exportTemplate = function exportTemplate(tmp) {
    var data = formData();
    var modalBody = tmp.querySelector('.modal-main');
    modalBody.insertAdjacentHTML('beforeend', createModal(data));
  };

  var resetExportTemplate = function resetExportTemplate(tmp) {
    tmp.querySelector('.modal-main').textContent = '';
  }; //======== document init ========


  $form.querySelectorAll('[data-item]').forEach(function (e) {
    updateItemRow(e);
    setItemFormValidate();
  });
  $inputs.forEach(function (e, i) {
    e.addEventListener('change', function (ev) {
      var errors = validate($form, constraints) || {};
      showErrorsForInput(e, errors[e.name]);
    });
  }); // add item row

  $form.querySelector('#addItem').addEventListener('click', function (e) {
    e.preventDefault();
    var row = $form.querySelector('[data-item]');
    var newRow = row.cloneNode(true);
    newRow.querySelectorAll('input').forEach(function (e) {
      e.value = e.defaultValue;
      e.classList.remove('is-invalid');
      e.parentNode.querySelectorAll('.invalid-feedback').forEach(function (el) {
        el.remove();
      });
    });
    $form.querySelector('[data-items]').append(newRow);
    updateItemRow(newRow);
    setItemFormValidate();
  }); // on preview

  $preview.addEventListener('show.bs.modal', function (e) {
    exportTemplate(this);
  });
  $preview.addEventListener('hidden.bs.modal', function (e) {
    e.preventDefault();
    resetExportTemplate(this);
  }); // on Submit

  $modal.addEventListener('show.bs.modal', function (e) {
    if (!handleFormSubmit($form)) {
      e.preventDefault();
      resetExportTemplate(this);
    } else {
      exportTemplate(this);
    }
  });
  $modal.addEventListener('hidden.bs.modal', function (e) {
    e.preventDefault();
    resetExportTemplate(this);
  }); // =========== Export ============

  $modal.querySelector('#exportImage').addEventListener('click', function () {
    var preview = $modal.querySelector('.modal-content'); // export Image

    html2canvas(preview).then(function (canvas) {
      document.body.appendChild(canvas);
      var $a = document.createElement('a');
      $a.href = canvas.toDataURL('image/jpeg').replace('image/jpeg', 'image/octet-stream');
      $a.download = ''.concat(new Date().toLocaleString('roc', {
        hour12: false
      }), '_quotation.jpg');
      $a.click();
    });
  }); // =========== Print ==============

  $modal.querySelector('#print').addEventListener('click', function () {
    var jsPDF = window.jspdf.jsPDF;
    var print = $modal.querySelector('.modal-content'); // export pdf

    html2canvas(print).then(function (canvas) {
      var pdfImage = canvas.toDataURL();
      var doc = new jsPDF({
        unit: 'px',
        hotfixes: ['px_scaling']
      });
      var scale = (2780 - canvas.width) / 2480;
      doc.addImage(pdfImage, 'JPEG', 10, 10, canvas.width * scale, canvas.height * scale);
      doc.save(new Date().toLocaleString('roc', {
        hour12: false
      }) + '_quotation.pdf');
    });
  });
})();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
