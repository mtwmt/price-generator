"use strict";

(function () {
  var modal = document.querySelector('#modal');
  var form = document.querySelector('form#form');
  var inputs = document.querySelectorAll('input, textarea, select');

  var formData = function formData() {
    var data = {
      company: document.querySelector('[name=company]').value,
      name: document.querySelector('[name=name]').value,
      phone: document.querySelector('[name=phone]').value,
      email: document.querySelector('[name=email]').value,
      description: document.querySelector('[name=description]').value,
      items: []
    };
    document.querySelectorAll('[data-item]').forEach(function (element, index) {
      if (index === 0) {
        return;
      }

      data.items.push({
        category: element.querySelector('[name=category]').value,
        item: element.querySelector('[name=item]').value,
        price: element.querySelector('[name=price]').value,
        number: element.querySelector('[name=number]').value,
        amount: element.querySelector('[name=amount]').value
      });
    }); // const data = {
    //   company: 'JAV',
    //   name: 'Mandy',
    //   phone: '0912345678',
    //   email: '123@123.tw',
    //   description: 'more and more',
    //   items: [
    //     {
    //       category: 'jquery',
    //       item: 'gotop',
    //       price: '500',
    //       number: '1',
    //       amount: '500',
    //     },
    //     {
    //       category: 'jquery',
    //       item: 'light/dark themes',
    //       price: '3000',
    //       number: '1',
    //       amount: '3000',
    //     },
    //     {
    //       category: 'jquery',
    //       item: 'more fold',
    //       price: '1000',
    //       number: '1',
    //       amount: '1000',
    //     },
    //     {
    //       category: 'page',
    //       item: 'list (main)',
    //       price: '3000',
    //       number: '1',
    //       amount: '3000',
    //     },
    //     {
    //       category: 'page',
    //       item: 'list',
    //       price: '1000',
    //       number: '3',
    //       amount: '3000',
    //     },
    //   ],
    // };

    return data;
  };

  var setAmount = function setAmount(element) {
    var price = element.querySelector('[name=price]').value || 0;
    var number = element.querySelector('[name=number]').value || 1;
    element.querySelector('[name=amount]').value = price * number;
  };

  var setTotal = function setTotal() {
    var total = document.querySelectorAll('[name=amount]');
    var getTotal = 0;
    total.forEach(function (e) {
      getTotal += +e.value;
    });
    document.querySelector('#total-price').textContent = getTotal;
  };

  var updateDom = function updateDom() {
    document.querySelectorAll('[data-item]').forEach(function (element, index) {
      element.querySelector('[name=price]').addEventListener('change', function (ev) {
        setAmount(element);
        setTotal();
      });
      element.querySelector('[name=number]').addEventListener('change', function (ev) {
        setAmount(element);
        setTotal();
      });

      if (index > 1) {
        element.querySelector('.delItem').addEventListener('click', function (e) {
          this.parentElement.parentElement.remove();
          setTotal();
        });
      }
    });
  };

  var createItem = function createItem(data) {
    console.log('createItem', data);
    return data.map(function (e) {
      return "\n        <tr>\n          <td class=\"text-left\">".concat(e.category, "</td>\n          <td class=\"text-left\">").concat(e.item, "</td>\n          <td>").concat(e.price, "</td>\n          <td>").concat(e.number, "</td>\n          <td class=\"price\">").concat(e.amount, "</td>\n        </tr> \n      ");
    });
  };

  var createModal = function createModal(data) {
    return "\n      <div class=\"table-responsive\">\n        <table class=\"table table-vcenter\">\n          <tr>\n            <th>\u5831\u50F9\u4EBA\u54E1</th>\n            <td>".concat(data.name, "</td>\n          </tr>\n          <tr>\n            <th>\u806F\u7D61\u96FB\u8A71</th>\n            <td>").concat(data.phone, "</td>\n          </tr>\n          <tr>\n            <th>E-Mail</th>\n            <td>").concat(data.email, "</td>\n          </tr>\n        </table>\n        <table class=\"table table-vcenter\">\n          <thead>\n            <tr>\n              <th>\u985E\u5225</th>\n              <th>\u9805\u76EE</th>\n              <th>\u55AE\u50F9</th>\n              <th>\u6578\u91CF / \u9801</th>\n              <th>\u91D1\u984D</th>\n            </tr>\n          </thead>\n          <tbody>\n            ").concat(createItem(data.items).join(''), "\n          </tbody>\n        </table>\n      </div>\n    ");
  }; // validate form


  var constraints = {
    company: {
      presence: {
        message: '^請輸入業主名稱'
      }
    },
    name: {
      presence: {
        message: '^請輸入報價人員'
      }
    },
    email: {
      presence: {
        message: '^請輸入 E-Mail'
      },
      email: {
        message: '格式錯誤'
      }
    },
    phone: {
      presence: {
        message: '^請輸入聯絡電話'
      },
      format: {
        pattern: '^09[0-9]{8}$',
        message: '^手機格式錯誤'
      }
    }
  };

  var resetFormInput = function resetFormInput(formInput) {
    formInput.classList.remove('is-invalid');
    formInput.parentNode.querySelectorAll('.invalid-feedback').forEach(function (el) {
      el.remove();
    });
  };

  var addError = function addError(formInput, error) {
    var block = document.createElement('div');
    block.classList.add('invalid-feedback');
    block.innerText = error;
    formInput.parentNode.appendChild(block);
  };

  var showErrorsForInput = function showErrorsForInput(input, errors) {
    resetFormInput(input);

    if (errors) {
      input.classList.add('is-invalid');
      errors.forEach(function (err) {
        addError(input, err);
      });
    }
  };

  var showErrors = function showErrors(form, errors) {
    form.querySelectorAll('input[name], select[name]').forEach(function (input) {
      showErrorsForInput(input, errors && errors[input.name]);
    });
  };

  var handleFormSubmit = function handleFormSubmit(form, input) {
    var errors = validate(form, constraints);

    if (!errors) {
      return true;
    }

    showErrors(form, errors || {});
    return false;
  };

  updateDom();

  for (var i = 0; i < inputs.length; ++i) {
    inputs.item(i).addEventListener('change', function (ev) {
      var errors = validate(form, constraints) || {};
      showErrorsForInput(this, errors[this.name]);
    });
  } // add item row


  document.querySelector('#addItem').addEventListener('click', function (e) {
    e.preventDefault();
    var row = document.querySelector('[data-item]');
    var newRow = row.cloneNode(true);
    newRow.style.display = 'flex';
    document.querySelector('[data-items]').append(newRow);
    updateDom();
  }); // on Submit

  modal.addEventListener('show.bs.modal', function (e) {
    if (!handleFormSubmit(form)) {
      e.preventDefault();
      console.log('this', this);
      this.querySelector('.modal-title').textContent = '';
      this.querySelector('.modal-body').textContent = '';
    } else {
      var data = formData();
      var modalTitle = document.querySelector('.modal-title');
      var modalBody = document.querySelector('.modal-body');
      modalTitle.append(data.company);
      modalBody.insertAdjacentHTML('beforeend', createModal(data));
    }
  });
  modal.addEventListener('hidden.bs.modal', function (e) {
    e.preventDefault();
    this.querySelector('.modal-title').textContent = '';
    this.querySelector('.modal-body').textContent = '';
  });
})();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
